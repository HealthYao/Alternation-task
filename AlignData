function AlignData(FileName, lasertrialnum)

load(FileName);
% Parameter definition
SampleOdorLen = 1; DelayLen = 4; TestOdorLen = 1; Waterlen = 1; ITI = 10;
WholeLen = 2*ITI + SampleOdorLen + DelayLen + TestOdorLen + Waterlen;
TimeGain = 10; % The number of time bins in 1 sec
WaveformStartPosition = 4; % Column ID of waveform information start in 'Data'
% Primary properties of data
TetrodeList = [];
UnitsList = [];
Waveform = [];
for itr = Data(1,1) : Data(end,1) % 128 channels
    TetrodeList = [TetrodeList; itr*ones(max(Data(Data(:,1) == itr,2)),1)];
    UnitsList = [UnitsList 1:max(Data(Data(:,1) == itr,2))];
    for itr1 = 1:max(Data(Data(:,1) == itr,2))
        Waveform = [Waveform; mean(Data(Data(:,1) == itr & Data(:,2) == itr1,WaveformStartPosition:size(Data,2)))];
    end
end
UnitsList = [TetrodeList UnitsList'];
Data(:,1) = Data(:,1) - 32;
TetrodeList = TetrodeList - 32;
UnitsList(:,1) = UnitsList(:,1)-32;
NewData = Data;
for i = 1:size(NewData,1) % Each spike
    if NewData(i,2) ~= 0
        NewData(i,2) = NewData(i,2) + nnz(TetrodeList < NewData(i,1));
    end
end
NewData(NewData(:,2) == 0,:) = [];
AutoCorrValue = AutoCorr(NewData); % Used as judegment in the next step *****************************
A = Cue1.Ts; B = Cue2.Ts;
A(:,2) = 1; B(:,2) = 2;

%% Extract information of A and B ////// Plexon //////
rawA = A; rawB = B;
for itr = 1:length(rawA)
    if isempty(find(rawB(:,1)==rawA(itr,1)))
    else
        B(B(:,1) == rawA(itr,1),2) = 0;
        A(itr,2) = 0;
    end
    if itr < length(rawA) & rawA(itr + 1,1) - rawA(itr,1) < 0.5
        A(itr,2) = 0;
    end
end
for itr=1:length(rawB)
    if itr < length(rawB) & rawB(itr + 1,1) - rawB(itr,1) < 0.5
        B(itr,2) = 0;
    end
end
A(A(:,2) == 0,:) = [];
B(B(:,2) == 0,:) = [];

%% Get firing rates of units
FR = zeros(size(UnitsList,1),TimeGain*ceil(max(NewData(:,3))));
for itr = 1:size(NewData,1)
    FR(NewData(itr,2),ceil(TimeGain*NewData(itr,3))) = FR(NewData(itr,2),ceil(TimeGain*NewData(itr,3))) + 1;
end

%% Filter lick signals
NewLick = Lick.Ts(1,:);
for itr = 2:length(Lick.Ts)
    if Lick.Ts(itr,1) - Lick.Ts(itr-1,1) > 0.031
        NewLick = [NewLick; Lick.Ts(itr,1)];
    end
    if Lick.Ts(itr,1) - NewLick(length(NewLick)) > 0.1
        NewLick = [NewLick; Lick.Ts(itr,1)];
    end
end

%% Get information of sample and test odors of finished trials
Odor = sortrows([A;B]); 
abort = find(diff(Odor(:,1)) > ITI + SampleOdorLen + DelayLen + TestOdorLen + Waterlen - 0.75 & diff(Odor(:,1)) < ITI + SampleOdorLen + DelayLen + TestOdorLen + Waterlen + 0.75);
if ~isempty(abort) % Rescue finished trials
    for i = 1:length(abort)
        if abort(i,1) ~= 1
            a = Odor(abort(i,1),1) - Odor(abort(i,1) - 1,1);
            if a < SampleOdorLen + DelayLen + 0.5 & a > SampleOdorLen + DelayLen - 0.5
                abort(i,1) = 0;
            end
        end
    end
    abort(abort(:,1) == 0,:) = [];
    Odor(abort,:) = [];
end
i = 1;
while i < size(Odor,1) % To further filter out noise
    if (i == 1) | (isempty(find(Odor(1:i-1,2)~=0)) & i > 1)
        if Odor(i+1,1) - Odor(i,1) > SampleOdorLen + DelayLen - 0.5 & Odor(i+1,1) - Odor(i,1) < SampleOdorLen + DelayLen + 0.5
            i = i + 2;
        else
            Odor(i,2) = 0; i = i + 1;
        end
    else
        if (Odor(i,1) - Odor(max(find(Odor(1:i-1,2)~=0)),1) > ITI + TestOdorLen + Waterlen - 0.75) & Odor(i+1,1) - Odor(i,1) > SampleOdorLen + DelayLen - 0.5 & Odor(i+1,1) - Odor(i,1) < SampleOdorLen + DelayLen + 0.5
            i = i + 2;
        else
            Odor(i,2) = 0; i = i + 1;
        end
    end
end
remain = find(Odor(1:end-1,2) ~= 0);
if Odor(remain(end,1),1) - Odor(remain(end-1,1),1) > SampleOdorLen + DelayLen - 0.5 & Odor(remain(end,1),1) - Odor(remain(end-1,1),1) < SampleOdorLen + DelayLen + 0.5
    Odor(end,2) = 0;   % Extremely special condition
end
Odor(Odor(:,2) == 0,:)=[];
Odor = Odor';

%% Get check periods
TestOdorTS = [];
for i = 1:size(Odor,2)
    if rem(i,2) == 0
        TestOdorTS = [TestOdorTS Odor(1,i)];
    end
end
ResponsePeriodStartTS = TestOdorTS + TestOdorLen;
ResponsePeriodEndTS = ResponsePeriodStartTS + Waterlen;
SampleOdorTS = Odor(1,1:2:end);
OdorTs = horzcat(SampleOdorTS(:),TestOdorTS(:));

%% Laser application timestamp
if ~isempty(AppliledLaser) & length(AppliedLaser) <= lasertrialnum
    LaserStart = AppliedLaser;
end

% %% Baseline activity
% PseudoLength = 10; PseudoTime = 290;
% PseudoTrialRG = [];
% for itr = 1:size(FiringRate,1)
%     PseudoTrialRG = [PseudoTrialRG; [{[]}]];
% end
% for itr=1:PseudoLength:PseudoTime - PseudoLength + 1
%     for itr1 = 1:size(FiringRate,1)
%         PseudoTrialRG{itr1,1} = [PseudoTrialRG{itr1,1};{NewData(NewData(:,2)==itr1 & NewData(:,3) > itr & NewData(:,3) < itr + PseudoLength,3)-itr}];
%     end
% end

%% Spikes in 4 kinds of trials
TrialMark = []; LickTime = []; LickRate = []; SingleUnitList = []; NewWaveForm = []; FRResults = []; RGResults = [];
SingleUnitCount = 0; BeforeSampOdorDura = 5; AfterRespPeriodDura = 5;
MaxTrialNum = find(ResponsePeriodEndTS*TimeGain > size(FR,2)); % Get maximal trial ID within which spikes were recorded
if ~isempty(MaxTrialNum)
    MaxTrialNum = min(MaxTrialNum) - 1;
else
    MaxTrialNum = size(ResponsePeriodEndTS,2);
end

if exist('LaserStart')
    FRResults_laser = []; RGResults_laser = [];
    LaserStart = LaserStart(LaserStart < (size(FR,2)/TimeGain - 0.5));
end

SpikeTime = []; UnitID = 1; DiscaredUnitID = [];
for itr = 1:size(FR,1) % Go through all neurons
    if mean(FR(itr,1:TimeGain*ResponsePeriodEndTS(1,MaxTrialNum)),2) * TimeGain >= 2 & sum(AutoCorrValue(itr,21:22))/sum(FR(itr,:)) < 0.0015
        SingleUnitList = [SingleUnitList;UnitsList(itr,:)]; SingleUnitCount = SingleUnitCount + 1;
        NewWaveForm = [NewWaveForm; Waveform(itr,:)]; % Waveform of this neuron
        SpikeTrace = FR(itr,:); % FR of this neuron
        tempData = NewData(NewData(:,2) == itr,:); % Spike timestamp of this unit
        SP = []; RG = [];
        SpikeTime{UnitID,1} = tempData(:,3); % For further cross correlogram analysis ////// not seperating sample odor 1 and 2 ////// 
        UnitID = UnitID + 1;
        for itr1=1:MaxTrialNum % Go through all trials
            % Get sample and test odor within one trial
            SampOdorIden = Odor(2,abs(Odor(1,:) + SampleOdorLen + DelayLen + TestOdorLen - ResponsePeriodStartTS(1,itr1)) < 1);
            TestOdorIden = Odor(2,abs(Odor(1,:) + TestOdorLen - ResponsePeriodStartTS(1,itr1)) < 1);
            SP = [SP {SpikeTrace(round(ResponsePeriodEndTS(1,itr1)*TimeGain)-ceil((BeforeSampOdorDura + SampleOdorLen + DelayLen + TestOdorLen + Waterlen)*TimeGain):round(ResponsePeriodEndTS(1,itr1)*TimeGain) + AfterRespPeriodDura*TimeGain)}];
            RG = [RG {tempData(tempData(:,3) > ResponsePeriodEndTS(1,itr1) - (BeforeSampOdorDura + SampleOdorLen + DelayLen + TestOdorLen + Waterlen) & tempData(:,3) < ResponsePeriodEndTS(1,itr1) + AfterRespPeriodDura,3) - (ResponsePeriodEndTS(1,itr1) - (BeforeSampOdorDura+ SampleOdorLen + DelayLen + TestOdorLen + Waterlen))}];
            licknuminbin = [];
            % Information of lick and trial marker is registered for only 1 time
            if SingleUnitCount == 1
                for t = (ResponsePeriodEndTS(1,itr1) - (BeforeSampOdorDura + SampleOdorLen + DelayLen + TestOdorLen + Waterlen)):1/TimeGain:ResponsePeriodEndTS(1,itr1) + AfterRespPeriodDura - 1/TimeGain
                    templicknumofbin = length(find((NewLick > t) & (NewLick <= t + 1/TimeGain)));
                    licknuminbin = [licknuminbin templicknumofbin];
                end
                LickRate = [LickRate;licknuminbin];
                LickTime = [LickTime {NewLick(NewLick > ResponsePeriodEndTS(1,itr1) - (BeforeSampOdorDura+ SampleOdorLen + DelayLen + TestOdorLen + Waterlen) & NewLick < ResponsePeriodEndTS(1,itr1),1)-(ResponsePeriodEndTS(1,itr1) - (BeforeSampOdorDura+ SampleOdorLen + DelayLen + TestOdorLen + Waterlen))}];
                if SampOdorIden == 1
                    if isempty(find(NewLick > ResponsePeriodStartTS(1,itr1) & NewLick < ResponsePeriodEndTS(1,itr1)))
                        TrialMark = [TrialMark; [OdorTs(itr1,:) 1 TestOdorIden 2]];
                    else
                        TrialMark = [TrialMark; [OdorTs(itr1,:) 1 TestOdorIden 1]];
                    end
                else
                    if isempty(find(NewLick > ResponsePeriodStartTS(1,itr1) & NewLick < ResponsePeriodEndTS(1,itr1)))
                        TrialMark = [TrialMark; [OdorTs(itr1,:) 2 TestOdorIden 4]];
                    else
                        TrialMark = [TrialMark; [OdorTs(itr1,:) 2 TestOdorIden 3]];
                    end
                end
            end
        end
        FRResults = CellCombine(FRResults,SP);
        RGResults = [RGResults; RG];
        %%%%%%%%%%%%%%%%%  Laser On-Off  %%%%%%%%%%%%%%%%%%%%
        if exist('LaserStart') % only in file where there is laser application
            Laser_SP = []; Laser_RG = [];
            for itr1=1:size(LaserStart,1) % go through all trials of laser application
                Laser_SP = [Laser_SP {SpikeTrace(round(LaserStart(itr1,1)*TimeGain-BeforeSampOdorDura*TimeGain):(round(LaserStart(itr1,1)*TimeGain)+(DelayLen+AfterLaser)*TimeGain))}];
                Laser_RG = [Laser_RG {tempData(tempData(:,3) > LaserStart(itr1,1)-BeforeSampOdorDura & tempData(:,3) < LaserStart(itr1,1)+DelayLen+AfterLaser,3)- (LaserStart(itr1,1)-BeforeSampOdorDura)}];
            end
            FRResults_laser = CellCombine(FRResults_laser,Laser_SP);
            RGResults_laser = [RGResults_laser; Laser_RG];
        end
    else
        DiscaredUnitID = [DiscaredUnitID itr];
    end
end
if ~isempty(DiscaredUnitID)
    for iUnit = 1:length(DiscaredUnitID)
        NewData(NewData(:,2)==DiscaredUnitID(iUnit),:) = [];
    end
    a = unique(NewData(:,2));
    for i = 1:length(a)
        tempUnitID = a(i);
        NewData(NewData(:,2)==tempUnitID,2) = i;
    end
end
if exist('LaserStart')
    save(['short_' FileName(5:end)],'TrialMark','SingleUnitList','NewWaveForm','LaserResults','LaserRGResults','Results','RGResults','LickRate','LickTime','SpikeTime','NewData','-v7.3');
else
    save(['short_' FileName(5:end)],'TrialMark','SingleUnitList','NewWaveForm','Results','RGResults','LickRate','LickTime','SpikeTime','NewData','-v7.3');
end

